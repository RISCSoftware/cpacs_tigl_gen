// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <cctype>

#include "CTiglError.h"
#include "to_string.h"

namespace tigl
{
namespace generated
{
    // This enum is used in:
    // CPACSTypeA
    // CPACSTypeB

    enum CPACSColor
    {
        red,
        green,
        blue
    };

    inline std::string CPACSColorToString(const CPACSColor& value)
    {
        switch(value) {
        case red: return "red";
        case green: return "green";
        case blue: return "blue";
        default: throw CTiglError("Invalid enum value \"" + std_to_string(static_cast<int>(value)) + "\" for enum type CPACSColor");
        }
    }
    inline CPACSColor stringToCPACSColor(const std::string& value)
    {
        auto toLower = [](std::string str) { for (char& c : str) { c = std::tolower(c); } return str; };
        if (toLower(value) == "red") { return red; }
        if (toLower(value) == "green") { return green; }
        if (toLower(value) == "blue") { return blue; }
        throw CTiglError("Invalid string value \"" + value + "\" for enum type CPACSColor");
    }
} // namespace generated

// Aliases in tigl namespace
using ECPACSColor = generated::CPACSColor;
} // namespace tigl
// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <cctype>

#include "CTiglError.h"
#include "to_string.h"

namespace tigl
{
namespace generated
{
    // This enum is used in:
    // CPACSTypeC
    // CPACSTypeD

    enum CPACSTypeC_color
    {
        cyan,
        magenta,
        yellow
    };

    inline std::string CPACSTypeC_colorToString(const CPACSTypeC_color& value)
    {
        switch(value) {
        case cyan: return "cyan";
        case magenta: return "magenta";
        case yellow: return "yellow";
        default: throw CTiglError("Invalid enum value \"" + std_to_string(static_cast<int>(value)) + "\" for enum type CPACSTypeC_color");
        }
    }
    inline CPACSTypeC_color stringToCPACSTypeC_color(const std::string& value)
    {
        auto toLower = [](std::string str) { for (char& c : str) { c = std::tolower(c); } return str; };
        if (toLower(value) == "cyan") { return cyan; }
        if (toLower(value) == "magenta") { return magenta; }
        if (toLower(value) == "yellow") { return yellow; }
        throw CTiglError("Invalid string value \"" + value + "\" for enum type CPACSTypeC_color");
    }
} // namespace generated

// Aliases in tigl namespace
using ECPACSTypeC_color = generated::CPACSTypeC_color;
} // namespace tigl
// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <tixi.h>
#include "CPACSTypeA.h"
#include "CPACSTypeB.h"
#include "CPACSTypeC.h"
#include "CPACSTypeD.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDObject;

namespace generated
{
    // This class is used in:
    class CPACSRoot
    {
    public:
        TIGL_EXPORT CPACSRoot();
        TIGL_EXPORT virtual ~CPACSRoot();

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const CPACSTypeA& GetA() const;
        TIGL_EXPORT virtual CPACSTypeA& GetA();

        TIGL_EXPORT virtual const CPACSTypeB& GetB() const;
        TIGL_EXPORT virtual CPACSTypeB& GetB();

        TIGL_EXPORT virtual const CPACSTypeC& GetC() const;
        TIGL_EXPORT virtual CPACSTypeC& GetC();

        TIGL_EXPORT virtual const CPACSTypeD& GetD() const;
        TIGL_EXPORT virtual CPACSTypeD& GetD();

    protected:
        CPACSTypeA m_a;
        CPACSTypeB m_b;
        CPACSTypeC m_c;
        CPACSTypeD m_d;

    private:
        CPACSRoot(const CPACSRoot&) = delete;
        CPACSRoot& operator=(const CPACSRoot&) = delete;

        CPACSRoot(CPACSRoot&&) = delete;
        CPACSRoot& operator=(CPACSRoot&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSRoot = generated::CPACSRoot;
} // namespace tigl
// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include "CPACSColor.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDObject;

namespace generated
{
    class CPACSRoot;

    // This class is used in:
    // CPACSRoot

    class CPACSTypeA
    {
    public:
        TIGL_EXPORT CPACSTypeA(CPACSRoot* parent);

        TIGL_EXPORT virtual ~CPACSTypeA();

        TIGL_EXPORT CPACSRoot* GetParent();

        TIGL_EXPORT const CPACSRoot* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const boost::optional<std::string>& GetId() const;
        TIGL_EXPORT virtual void SetId(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<CPACSColor>& GetColor() const;
        TIGL_EXPORT virtual void SetColor(const boost::optional<CPACSColor>& value);

    protected:
        CPACSRoot* m_parent;

        boost::optional<std::string> m_id;
        boost::optional<CPACSColor>  m_color;

    private:
        CPACSTypeA(const CPACSTypeA&) = delete;
        CPACSTypeA& operator=(const CPACSTypeA&) = delete;

        CPACSTypeA(CPACSTypeA&&) = delete;
        CPACSTypeA& operator=(CPACSTypeA&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSTypeA = generated::CPACSTypeA;
using CCPACSRoot = generated::CPACSRoot;
} // namespace tigl
// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include "CPACSColor.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDObject;

namespace generated
{
    class CPACSRoot;

    // This class is used in:
    // CPACSRoot

    class CPACSTypeB
    {
    public:
        TIGL_EXPORT CPACSTypeB(CPACSRoot* parent);

        TIGL_EXPORT virtual ~CPACSTypeB();

        TIGL_EXPORT CPACSRoot* GetParent();

        TIGL_EXPORT const CPACSRoot* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const boost::optional<std::string>& GetId() const;
        TIGL_EXPORT virtual void SetId(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<CPACSColor>& GetColor() const;
        TIGL_EXPORT virtual void SetColor(const boost::optional<CPACSColor>& value);

    protected:
        CPACSRoot* m_parent;

        boost::optional<std::string> m_id;
        boost::optional<CPACSColor>  m_color;

    private:
        CPACSTypeB(const CPACSTypeB&) = delete;
        CPACSTypeB& operator=(const CPACSTypeB&) = delete;

        CPACSTypeB(CPACSTypeB&&) = delete;
        CPACSTypeB& operator=(CPACSTypeB&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSTypeB = generated::CPACSTypeB;
using CCPACSRoot = generated::CPACSRoot;
} // namespace tigl
// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include "CPACSTypeC_color.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDObject;

namespace generated
{
    class CPACSRoot;

    // This class is used in:
    // CPACSRoot

    class CPACSTypeC
    {
    public:
        TIGL_EXPORT CPACSTypeC(CPACSRoot* parent);

        TIGL_EXPORT virtual ~CPACSTypeC();

        TIGL_EXPORT CPACSRoot* GetParent();

        TIGL_EXPORT const CPACSRoot* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const boost::optional<std::string>& GetId() const;
        TIGL_EXPORT virtual void SetId(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<CPACSTypeC_color>& GetColor() const;
        TIGL_EXPORT virtual void SetColor(const boost::optional<CPACSTypeC_color>& value);

    protected:
        CPACSRoot* m_parent;

        boost::optional<std::string>   m_id;
        boost::optional<CPACSTypeC_color> m_color;

    private:
        CPACSTypeC(const CPACSTypeC&) = delete;
        CPACSTypeC& operator=(const CPACSTypeC&) = delete;

        CPACSTypeC(CPACSTypeC&&) = delete;
        CPACSTypeC& operator=(CPACSTypeC&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSTypeC = generated::CPACSTypeC;
using CCPACSRoot = generated::CPACSRoot;
} // namespace tigl
// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include "CPACSTypeC_color.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDObject;

namespace generated
{
    class CPACSRoot;

    // This class is used in:
    // CPACSRoot

    class CPACSTypeD
    {
    public:
        TIGL_EXPORT CPACSTypeD(CPACSRoot* parent);

        TIGL_EXPORT virtual ~CPACSTypeD();

        TIGL_EXPORT CPACSRoot* GetParent();

        TIGL_EXPORT const CPACSRoot* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const boost::optional<std::string>& GetId() const;
        TIGL_EXPORT virtual void SetId(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<CPACSTypeC_color>& GetColor() const;
        TIGL_EXPORT virtual void SetColor(const boost::optional<CPACSTypeC_color>& value);

    protected:
        CPACSRoot* m_parent;

        boost::optional<std::string>   m_id;
        boost::optional<CPACSTypeC_color> m_color;

    private:
        CPACSTypeD(const CPACSTypeD&) = delete;
        CPACSTypeD& operator=(const CPACSTypeD&) = delete;

        CPACSTypeD(CPACSTypeD&&) = delete;
        CPACSTypeD& operator=(CPACSTypeD&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSTypeD = generated::CPACSTypeD;
using CCPACSRoot = generated::CPACSRoot;
} // namespace tigl
// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "CPACSRoot.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSRoot::CPACSRoot()
        : m_a(this)
        , m_b(this)
        , m_c(this)
        , m_d(this)
    {
    }

    CPACSRoot::~CPACSRoot()
    {
    }

    const CTiglUIDObject* CPACSRoot::GetNextUIDParent() const
    {
        return nullptr;
    }

    CTiglUIDObject* CPACSRoot::GetNextUIDParent()
    {
        return nullptr;
    }

    void CPACSRoot::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element a
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/a")) {
            m_a.ReadCPACS(tixiHandle, xpath + "/a");
        }
        else {
            LOG(ERROR) << "Required element a is missing at xpath " << xpath;
        }

        // read element b
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/b")) {
            m_b.ReadCPACS(tixiHandle, xpath + "/b");
        }
        else {
            LOG(ERROR) << "Required element b is missing at xpath " << xpath;
        }

        // read element c
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/c")) {
            m_c.ReadCPACS(tixiHandle, xpath + "/c");
        }
        else {
            LOG(ERROR) << "Required element c is missing at xpath " << xpath;
        }

        // read element d
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/d")) {
            m_d.ReadCPACS(tixiHandle, xpath + "/d");
        }
        else {
            LOG(ERROR) << "Required element d is missing at xpath " << xpath;
        }

    }

    void CPACSRoot::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "a", "b", "c", "d" };

        // write element a
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/a", childElemOrder);
        m_a.WriteCPACS(tixiHandle, xpath + "/a");

        // write element b
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/b", childElemOrder);
        m_b.WriteCPACS(tixiHandle, xpath + "/b");

        // write element c
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/c", childElemOrder);
        m_c.WriteCPACS(tixiHandle, xpath + "/c");

        // write element d
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/d", childElemOrder);
        m_d.WriteCPACS(tixiHandle, xpath + "/d");

    }

    const CPACSTypeA& CPACSRoot::GetA() const
    {
        return m_a;
    }

    CPACSTypeA& CPACSRoot::GetA()
    {
        return m_a;
    }

    const CPACSTypeB& CPACSRoot::GetB() const
    {
        return m_b;
    }

    CPACSTypeB& CPACSRoot::GetB()
    {
        return m_b;
    }

    const CPACSTypeC& CPACSRoot::GetC() const
    {
        return m_c;
    }

    CPACSTypeC& CPACSRoot::GetC()
    {
        return m_c;
    }

    const CPACSTypeD& CPACSRoot::GetD() const
    {
        return m_d;
    }

    CPACSTypeD& CPACSRoot::GetD()
    {
        return m_d;
    }

} // namespace generated
} // namespace tigl
// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSRoot.h"
#include "CPACSTypeA.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSTypeA::CPACSTypeA(CPACSRoot* parent)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSTypeA::~CPACSTypeA()
    {
    }

    const CPACSRoot* CPACSTypeA::GetParent() const
    {
        return m_parent;
    }

    CPACSRoot* CPACSTypeA::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSTypeA::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSTypeA::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    void CPACSTypeA::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute id
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "id")) {
            m_id = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "id");
            if (m_id->empty()) {
                LOG(WARNING) << "Optional attribute id is present but empty at xpath " << xpath;
            }
        }

        // read attribute color
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "color")) {
            m_color = stringToCPACSColor(tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "color"));
        }

    }

    void CPACSTypeA::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write attribute id
        if (m_id) {
            tixi::TixiSaveAttribute(tixiHandle, xpath, "id", *m_id);
        }
        else {
            if (tixi::TixiCheckAttribute(tixiHandle, xpath, "id")) {
                tixi::TixiRemoveAttribute(tixiHandle, xpath, "id");
            }
        }

        // write attribute color
        if (m_color) {
            tixi::TixiSaveAttribute(tixiHandle, xpath, "color", CPACSColorToString(*m_color));
        }
        else {
            if (tixi::TixiCheckAttribute(tixiHandle, xpath, "color")) {
                tixi::TixiRemoveAttribute(tixiHandle, xpath, "color");
            }
        }

    }

    const boost::optional<std::string>& CPACSTypeA::GetId() const
    {
        return m_id;
    }

    void CPACSTypeA::SetId(const boost::optional<std::string>& value)
    {
        m_id = value;
    }

    const boost::optional<CPACSColor>& CPACSTypeA::GetColor() const
    {
        return m_color;
    }

    void CPACSTypeA::SetColor(const boost::optional<CPACSColor>& value)
    {
        m_color = value;
    }

} // namespace generated
} // namespace tigl
// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSRoot.h"
#include "CPACSTypeB.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSTypeB::CPACSTypeB(CPACSRoot* parent)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSTypeB::~CPACSTypeB()
    {
    }

    const CPACSRoot* CPACSTypeB::GetParent() const
    {
        return m_parent;
    }

    CPACSRoot* CPACSTypeB::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSTypeB::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSTypeB::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    void CPACSTypeB::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute id
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "id")) {
            m_id = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "id");
            if (m_id->empty()) {
                LOG(WARNING) << "Optional attribute id is present but empty at xpath " << xpath;
            }
        }

        // read attribute color
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "color")) {
            m_color = stringToCPACSColor(tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "color"));
        }

    }

    void CPACSTypeB::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write attribute id
        if (m_id) {
            tixi::TixiSaveAttribute(tixiHandle, xpath, "id", *m_id);
        }
        else {
            if (tixi::TixiCheckAttribute(tixiHandle, xpath, "id")) {
                tixi::TixiRemoveAttribute(tixiHandle, xpath, "id");
            }
        }

        // write attribute color
        if (m_color) {
            tixi::TixiSaveAttribute(tixiHandle, xpath, "color", CPACSColorToString(*m_color));
        }
        else {
            if (tixi::TixiCheckAttribute(tixiHandle, xpath, "color")) {
                tixi::TixiRemoveAttribute(tixiHandle, xpath, "color");
            }
        }

    }

    const boost::optional<std::string>& CPACSTypeB::GetId() const
    {
        return m_id;
    }

    void CPACSTypeB::SetId(const boost::optional<std::string>& value)
    {
        m_id = value;
    }

    const boost::optional<CPACSColor>& CPACSTypeB::GetColor() const
    {
        return m_color;
    }

    void CPACSTypeB::SetColor(const boost::optional<CPACSColor>& value)
    {
        m_color = value;
    }

} // namespace generated
} // namespace tigl
// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSRoot.h"
#include "CPACSTypeC.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSTypeC::CPACSTypeC(CPACSRoot* parent)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSTypeC::~CPACSTypeC()
    {
    }

    const CPACSRoot* CPACSTypeC::GetParent() const
    {
        return m_parent;
    }

    CPACSRoot* CPACSTypeC::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSTypeC::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSTypeC::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    void CPACSTypeC::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute id
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "id")) {
            m_id = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "id");
            if (m_id->empty()) {
                LOG(WARNING) << "Optional attribute id is present but empty at xpath " << xpath;
            }
        }

        // read attribute color
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "color")) {
            m_color = stringToCPACSTypeC_color(tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "color"));
        }

    }

    void CPACSTypeC::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write attribute id
        if (m_id) {
            tixi::TixiSaveAttribute(tixiHandle, xpath, "id", *m_id);
        }
        else {
            if (tixi::TixiCheckAttribute(tixiHandle, xpath, "id")) {
                tixi::TixiRemoveAttribute(tixiHandle, xpath, "id");
            }
        }

        // write attribute color
        if (m_color) {
            tixi::TixiSaveAttribute(tixiHandle, xpath, "color", CPACSTypeC_colorToString(*m_color));
        }
        else {
            if (tixi::TixiCheckAttribute(tixiHandle, xpath, "color")) {
                tixi::TixiRemoveAttribute(tixiHandle, xpath, "color");
            }
        }

    }

    const boost::optional<std::string>& CPACSTypeC::GetId() const
    {
        return m_id;
    }

    void CPACSTypeC::SetId(const boost::optional<std::string>& value)
    {
        m_id = value;
    }

    const boost::optional<CPACSTypeC_color>& CPACSTypeC::GetColor() const
    {
        return m_color;
    }

    void CPACSTypeC::SetColor(const boost::optional<CPACSTypeC_color>& value)
    {
        m_color = value;
    }

} // namespace generated
} // namespace tigl
// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSRoot.h"
#include "CPACSTypeD.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSTypeD::CPACSTypeD(CPACSRoot* parent)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSTypeD::~CPACSTypeD()
    {
    }

    const CPACSRoot* CPACSTypeD::GetParent() const
    {
        return m_parent;
    }

    CPACSRoot* CPACSTypeD::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSTypeD::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSTypeD::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    void CPACSTypeD::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute id
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "id")) {
            m_id = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "id");
            if (m_id->empty()) {
                LOG(WARNING) << "Optional attribute id is present but empty at xpath " << xpath;
            }
        }

        // read attribute color
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "color")) {
            m_color = stringToCPACSTypeC_color(tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "color"));
        }

    }

    void CPACSTypeD::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write attribute id
        if (m_id) {
            tixi::TixiSaveAttribute(tixiHandle, xpath, "id", *m_id);
        }
        else {
            if (tixi::TixiCheckAttribute(tixiHandle, xpath, "id")) {
                tixi::TixiRemoveAttribute(tixiHandle, xpath, "id");
            }
        }

        // write attribute color
        if (m_color) {
            tixi::TixiSaveAttribute(tixiHandle, xpath, "color", CPACSTypeC_colorToString(*m_color));
        }
        else {
            if (tixi::TixiCheckAttribute(tixiHandle, xpath, "color")) {
                tixi::TixiRemoveAttribute(tixiHandle, xpath, "color");
            }
        }

    }

    const boost::optional<std::string>& CPACSTypeD::GetId() const
    {
        return m_id;
    }

    void CPACSTypeD::SetId(const boost::optional<std::string>& value)
    {
        m_id = value;
    }

    const boost::optional<CPACSTypeC_color>& CPACSTypeD::GetColor() const
    {
        return m_color;
    }

    void CPACSTypeD::SetColor(const boost::optional<CPACSTypeC_color>& value)
    {
        m_color = value;
    }

} // namespace generated
} // namespace tigl
